name: Deploy Code Repair Backend to VM

on:
  push:
    branches:
      - main
    paths-ignore:
      - "**.md"
      - ".github/workflows/**"

jobs:
  build_and_deploy:
    environment: production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout latest codebase
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"

      - name: Create GitHub Envs
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
          echo "APP_HOME=/home/alfredasare/code-repair-backend" >> $GITHUB_ENV

      - name: Create .env file
        run: |
          echo "MONGODB_URI=${{secrets.MONGODB_URI}}" > .env
          echo "DATABASE_NAME=${{secrets.DATABASE_NAME}}" >> .env
          echo "NEO4J_URI=${{secrets.NEO4J_URI}}" >> .env
          echo "NEO4J_USER=${{secrets.NEO4J_USER}}" >> .env
          echo "NEO4J_PASSWORD=${{secrets.NEO4J_PASSWORD}}" >> .env
          echo "SECRET_KEY=${{secrets.SECRET_KEY}}" >> .env
          echo "ALGORITHM=${{secrets.ALGORITHM}}" >> .env
          echo "ACCESS_TOKEN_EXPIRE_MINUTES=${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}" >> .env
          echo "OPENAI_API_KEY=${{secrets.OPENAI_API_KEY}}" >> .env
          echo "GROQ_API_KEY=${{secrets.GROQ_API_KEY}}" >> .env

      - name: Login to Docker Hub
        run: |
          echo "${{secrets.DOCKER_PASSWORD}}" | docker login -u "${{secrets.DOCKER_USERNAME}}" --password-stdin

      - name: Build and push image to Docker Hub
        run: |
          docker build -t ${{secrets.DOCKER_USERNAME}}/code-repair:${{env.SHORT_SHA}} .
          docker push ${{secrets.DOCKER_USERNAME}}/code-repair:${{env.SHORT_SHA}}

      - name: Copy deploy script, docker-compose to vm
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_KEY }}
          source: "compose.yaml,deploy.sh,.env"
          target: "${{env.APP_HOME}}"

      - name: SSH into VM and deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_IP }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_KEY }}
          script: |
            cd ${{env.APP_HOME}}
            bash ./deploy.sh ${{env.SHORT_SHA}}
